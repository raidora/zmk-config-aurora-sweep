/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "est_definitions.h"

#define EST_DOLLAR    &kp RA(N4)
#define LSFT_Z        &mt LSFT Z 
#define RSFT_MINS     &mt RSFT EE_MINUS


&mt {
	flavor = "tap-preferred";
	tapping-term-ms = <200>;
};

/ {

	combos { 
		compatible = "zmk,combos";
		combo_esc {
			timeout-ms = <50>;
			key-positions = <1 2>;
			bindings = <&kp ESC>;
		};
		combo_tab {
			timeout-ms = <50>;
			key-positions = <10 11>;
			bindings = <&kp TAB>;
		};
		combo_ralt {
			timeout-ms = <50>;
			key-positions = <17 16>;
			bindings = <&kp RALT>;
		};
		combo_lalt {
			timeout-ms = <50>;
			key-positions = <11 12>;
			bindings = <&kp LALT>;
		};
		combo_lgui {
			timeout-ms = <50>;
			key-positions = <12 13>;
			bindings = <&kp LGUI>;
		};
		combo_rgui {
			timeout-ms = <50>;
			key-positions = <17 18>;
			bindings = <&kp RGUI>;
		};
		combo_adia {
			timeout-ms = <50>;
			key-positions = <18 19>;
			bindings = <&kp ADIA>;
		};
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
				&kp Q    &kp W &kp E &kp R   &kp T         &kp Y &kp U &kp I     &kp O   &kp P
				&kp A    &kp S &kp D &kp F   &kp G         &kp H &kp J &kp K     &kp L   &kp ODIA
				LSFT_Z   &kp X &kp C &kp V   &kp B         &kp N &kp M &kp COMMA &kp DOT RSFT_MINS
								             &kp RET &kp SPC       &lt 1 BSPC &trans
				>;
		};
		sym_nums_layer {
			bindings = <
				EE_PERC EE_BKTK EE_LBRC EE_LABK EE_SLSH   EE_BSLS EE_RABK EE_RBRC EE_AMPR &trans
				EE_PIPE EE_DQUO EE_ASTR EE_LPRN EE_LCBR   EE_RCBR EE_RPRN EE_EQLS EE_QUOT EE_DOLR
				EE_CARN EE_CIRC EE_TLDE EE_EXCL EE_ATSI   EE_HSTG EE_QSTN EE_SCLN EE_COLN EE_USCR
				                        &trans  &trans    &trans  &trans
				>;
		};
		sym_closing_layer {
			bindings = <
				&trans &trans EE_RBRC EE_RABK &trans    &trans &kp N7 &kp N8 &kp N9 &trans
				&trans &trans &trans  EE_RPRN &trans    &trans &kp N4 &kp N5 &kp N6 &trans
				&trans &trans &trans  &trans  &trans    &kp N0 &kp N1 &kp N2 &kp N3 &trans
				&trans  &trans    &trans &trans
				>;
		};
		left_layer {
			bindings = <
				&kp N1  &kp N2    &kp N3  &kp N4    &kp N5     &kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0
				&kp TAB &kp LC(S) &kp DQT &kp PIPE2 &kp HASH   &kp MINUS &kp EQL   &kp LBKT  &kp RBKT  &kp DEL
				&kp ESC &kp TILDE &kp NON_US_BSLH &kp NON_US_HASH  &kp TILDE2    &kp MINUS &kp GRAVE &kp LBKT  &kp RBKT  &kp DEL
				&mo 1  &kp LGUI                     &kp RGUI &mo 2
				>;
		};
		right_layer {
			bindings = <
				&kp BANG  &kp ATSN  &kp HASH  &kp DLLR  &kp PRCT             &kp CRRT  &kp AMPS     &kp KMLT &kp LPRN &kp RPRN
				&kp HASH  &kp QMARK &kp FSLH  &kp COLN  &kp SCLN             &kp MINUS &kp KP_EQUAL &kp LBRC &kp RBRC &kp BKSP
				&kp LSFT  &kp KPLS  &kp LBKT  &kp RBKT  &kp BSLH             &kp UNDER &kp LEFT     &kp DOWN &kp UP   &kp RIGHT
				&mo 3 &kp LCTL                &kp SPC  &mo 2
				>;
		};
		tri_layer {
			bindings = <
				&kp NUM_1  &kp NUM_2  &kp NUM_3  &kp NUM_4 &kp NUM_5     &trans     &trans     &trans   &trans  &trans
				&kp F1     &kp F2     &kp F3     &kp F4    &kp F5        &trans     &kp PG_UP  &kp VOLU &kp K_MUTE &trans
				&bt BT_CLR &bt BT_NXT &bt BT_PRV &kp F6    &kp F7        &trans     &kp PG_DN  &kp VOLD  &trans &trans
				&trans &trans                      &trans &trans
				>;
		};
		empty_layer_template {
			bindings = <
				&trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans
				&trans &trans    &trans &trans
				>;
		};
	};
};
